#include <algorithm>

#include "caffe/common.hpp" 
#include "caffe/util/winograd.hpp"
#include "caffe/util/math_functions.hpp"

#define BLOCK_SIZE 32

namespace caffe{

template <typename Dtype> 
__global__ void padSrc_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int outH, int outW, int inputs, int batchs, int pad, float pData, int tNums)
{

	CUDA_KERNEL_LOOP(idx, tNums) {
		int highIdx = idx / (outH * outW); 
		int yIdx = (idx % (outH * outW)) / outW - pad;
		int xIdx = idx % outW - pad;

		if(xIdx < 0 || xIdx >= dataW || yIdx < 0 || yIdx >= dataH)
			dst[idx] = pData; 
		else
			dst[idx] = src[highIdx * dataH * dataW + yIdx * dataW + xIdx]; 
	}
}

template <typename Dtype> 
__global__ void winoWeight_gpu_kernel(const Dtype *src, Dtype *dst,  int inputs, int outputs, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int outputIdx = idx / inputs;
		int inputIdx = idx % inputs;
		int gap = inputs * outputs;
		int kIdx = outputIdx * inputs * 9 + inputIdx * 9;
		int gIdx = idx % gap;

        dst[gIdx + 0 * gap] = + 1./1. * ( + src[kIdx + 0]);
        dst[gIdx + 1 * gap] = + 1./2. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2]);
        dst[gIdx + 2 * gap] = + 1./2. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2]);
        dst[gIdx + 3 * gap] = + 1./1. * ( + src[kIdx + 2]);
        dst[gIdx + 4 * gap] = + 1./2. * ( + src[kIdx + 0] + src[kIdx + 3] + src[kIdx + 6]);
        dst[gIdx + 5 * gap] = + 1./4. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2] + src[kIdx + 3] + src[kIdx + 4] + src[kIdx + 5] + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 6 * gap] = + 1./4. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2] + src[kIdx + 3] - src[kIdx + 4] + src[kIdx + 5] + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 7 * gap] = + 1./2. * ( + src[kIdx + 2] + src[kIdx + 5] + src[kIdx + 8]);
        dst[gIdx + 8 * gap] = + 1./2. * ( + src[kIdx + 0] - src[kIdx + 3] + src[kIdx + 6]);
        dst[gIdx + 9 * gap] = + 1./4. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2] - src[kIdx + 3] - src[kIdx + 4] - src[kIdx + 5] + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 10 * gap] = + 1./4. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2] - src[kIdx + 3] + src[kIdx + 4] - src[kIdx + 5] + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 11 * gap] = + 1./2. * ( + src[kIdx + 2] - src[kIdx + 5] + src[kIdx + 8]);
        dst[gIdx + 12 * gap] = + 1./1. * ( + src[kIdx + 6]);
        dst[gIdx + 13 * gap] = + 1./2. * ( + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 14 * gap] = + 1./2. * ( + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 15 * gap] = + 1./1. * ( + src[kIdx + 8]);
	}
}

template <typename Dtype> 
__global__ void wino4x4Weight_gpu_kernel(const Dtype *src, Dtype *dst,  int inputs, int outputs, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int outputIdx = idx / inputs;
		int inputIdx = idx % inputs;
		int gap = inputs * outputs;
		int kIdx = outputIdx * inputs * 9 + inputIdx * 9;
		int gIdx = idx % gap;

        dst[gIdx + 0 * gap] = + 1./16. * ( + src[kIdx + 0]);
        dst[gIdx + 1 * gap] = + 1./24. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 2 * gap] = + 1./24. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 3 * gap] = + 1./96. * ( + src[kIdx + 0]) + 1./48. * ( + src[kIdx + 1]) + 1./24. * ( + src[kIdx + 2]);
        dst[gIdx + 4 * gap] = + 1./96. * ( + src[kIdx + 0]) + 1./48. * ( - src[kIdx + 1]) + 1./24. * ( + src[kIdx + 2]);
        dst[gIdx + 5 * gap] = + 1./4. * ( + src[kIdx + 2]);
        dst[gIdx + 6 * gap] = + 1./24. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 7 * gap] = + 1./36. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2] + src[kIdx + 3] + src[kIdx + 4] + src[kIdx + 5] + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 8 * gap] = + 1./36. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2] + src[kIdx + 3] - src[kIdx + 4] + src[kIdx + 5] + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 9 * gap] = + 1./144. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]) + 1./72. * ( - src[kIdx + 1] - src[kIdx + 4] - src[kIdx + 7]) + 1./36. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 10 * gap] = + 1./144. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]) + 1./72. * ( + src[kIdx + 1] + src[kIdx + 4] + src[kIdx + 7]) + 1./36. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 11 * gap] = + 1./6. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 12 * gap] = + 1./24. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 13 * gap] = + 1./36. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2] - src[kIdx + 3] - src[kIdx + 4] - src[kIdx + 5] + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 14 * gap] = + 1./36. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2] - src[kIdx + 3] + src[kIdx + 4] - src[kIdx + 5] + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 15 * gap] = + 1./144. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]) + 1./72. * ( - src[kIdx + 1] + src[kIdx + 4] - src[kIdx + 7]) + 1./36. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 16 * gap] = + 1./144. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]) + 1./72. * ( + src[kIdx + 1] - src[kIdx + 4] + src[kIdx + 7]) + 1./36. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 17 * gap] = + 1./6. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 18 * gap] = + 1./96. * ( + src[kIdx + 0]) + 1./48. * ( + src[kIdx + 3]) + 1./24. * ( + src[kIdx + 6]);
        dst[gIdx + 19 * gap] = + 1./144. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]) + 1./72. * ( - src[kIdx + 3] - src[kIdx + 4] - src[kIdx + 5]) + 1./36. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 20 * gap] = + 1./144. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]) + 1./72. * ( - src[kIdx + 3] + src[kIdx + 4] - src[kIdx + 5]) + 1./36. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 21 * gap] = + 1./576. * ( + src[kIdx + 0]) + 1./288. * ( + src[kIdx + 1] + src[kIdx + 3]) + 1./72. * ( + src[kIdx + 5] + src[kIdx + 7]) + 1./144. * ( + src[kIdx + 2] + src[kIdx + 4] + src[kIdx + 6]) + 1./36. * ( + src[kIdx + 8]);
        dst[gIdx + 22 * gap] = + 1./576. * ( + src[kIdx + 0]) + 1./288. * ( - src[kIdx + 1] + src[kIdx + 3]) + 1./72. * ( + src[kIdx + 5] - src[kIdx + 7]) + 1./144. * ( + src[kIdx + 2] - src[kIdx + 4] + src[kIdx + 6]) + 1./36. * ( + src[kIdx + 8]);
        dst[gIdx + 23 * gap] = + 1./24. * ( + src[kIdx + 2]) + 1./12. * ( + src[kIdx + 5]) + 1./6. * ( + src[kIdx + 8]);
        dst[gIdx + 24 * gap] = + 1./96. * ( + src[kIdx + 0]) + 1./48. * ( - src[kIdx + 3]) + 1./24. * ( + src[kIdx + 6]);
        dst[gIdx + 25 * gap] = + 1./144. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]) + 1./72. * ( + src[kIdx + 3] + src[kIdx + 4] + src[kIdx + 5]) + 1./36. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 26 * gap] = + 1./144. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]) + 1./72. * ( + src[kIdx + 3] - src[kIdx + 4] + src[kIdx + 5]) + 1./36. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 27 * gap] = + 1./576. * ( + src[kIdx + 0]) + 1./288. * ( + src[kIdx + 1] - src[kIdx + 3]) + 1./72. * ( - src[kIdx + 5] + src[kIdx + 7]) + 1./144. * ( + src[kIdx + 2] - src[kIdx + 4] + src[kIdx + 6]) + 1./36. * ( + src[kIdx + 8]);
        dst[gIdx + 28 * gap] = + 1./576. * ( + src[kIdx + 0]) + 1./288. * ( - src[kIdx + 1] - src[kIdx + 3]) + 1./72. * ( - src[kIdx + 5] - src[kIdx + 7]) + 1./144. * ( + src[kIdx + 2] + src[kIdx + 4] + src[kIdx + 6]) + 1./36. * ( + src[kIdx + 8]);
        dst[gIdx + 29 * gap] = + 1./24. * ( + src[kIdx + 2]) + 1./12. * ( - src[kIdx + 5]) + 1./6. * ( + src[kIdx + 8]);
        dst[gIdx + 30 * gap] = + 1./4. * ( + src[kIdx + 6]);
        dst[gIdx + 31 * gap] = + 1./6. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 32 * gap] = + 1./6. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 33 * gap] = + 1./24. * ( + src[kIdx + 6]) + 1./12. * ( + src[kIdx + 7]) + 1./6. * ( + src[kIdx + 8]);
        dst[gIdx + 34 * gap] = + 1./24. * ( + src[kIdx + 6]) + 1./12. * ( - src[kIdx + 7]) + 1./6. * ( + src[kIdx + 8]);
        dst[gIdx + 35 * gap] = + 1./1. * ( + src[kIdx + 8]);
	}
}

template <typename Dtype> 
__global__ void wino6x6Weight_gpu_kernel(const Dtype *src, Dtype *dst,  int inputs, int outputs, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int outputIdx = idx / inputs;
		int inputIdx = idx % inputs;
		int gap = inputs * outputs;
		int kIdx = outputIdx * inputs * 9 + inputIdx * 9;
		int gIdx = idx % gap;

        dst[gIdx + 0 * gap] = + 1./1. * ( + src[kIdx + 0]);
        dst[gIdx + 1 * gap] = + 2./9. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 2 * gap] = + 2./9. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 3 * gap] = + 2./45. * ( + src[kIdx + 2]) + 1./90. * ( + src[kIdx + 0]) + 1./45. * ( + src[kIdx + 1]);
        dst[gIdx + 4 * gap] = + 2./45. * ( + src[kIdx + 2]) + 1./90. * ( + src[kIdx + 0]) + 1./45. * ( - src[kIdx + 1]);
        dst[gIdx + 5 * gap] = + 16./45. * ( + src[kIdx + 1]) + 32./45. * ( + src[kIdx + 0]) + 8./45. * ( + src[kIdx + 2]);
        dst[gIdx + 6 * gap] = + 16./45. * ( - src[kIdx + 1]) + 32./45. * ( + src[kIdx + 0]) + 8./45. * ( + src[kIdx + 2]);
        dst[gIdx + 7 * gap] = + 1./1. * ( + src[kIdx + 2]);
        dst[gIdx + 8 * gap] = + 2./9. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 9 * gap] = + 4./81. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2] + src[kIdx + 3] + src[kIdx + 4] + src[kIdx + 5] + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 10 * gap] = + 4./81. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2] + src[kIdx + 3] - src[kIdx + 4] + src[kIdx + 5] + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 11 * gap] = + 2./405. * ( - src[kIdx + 1] - src[kIdx + 4] - src[kIdx + 7]) + 4./405. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 12 * gap] = + 2./405. * ( + src[kIdx + 1] + src[kIdx + 4] + src[kIdx + 7]) + 4./405. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 13 * gap] = + 16./405. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]) + 32./405. * ( - src[kIdx + 1] - src[kIdx + 4] - src[kIdx + 7]) + 64./405. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 14 * gap] = + 16./405. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]) + 32./405. * ( + src[kIdx + 1] + src[kIdx + 4] + src[kIdx + 7]) + 64./405. * ( - src[kIdx + 0] - src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 15 * gap] = + 2./9. * ( - src[kIdx + 2] - src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 16 * gap] = + 2./9. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 17 * gap] = + 4./81. * ( + src[kIdx + 0] + src[kIdx + 1] + src[kIdx + 2] - src[kIdx + 3] - src[kIdx + 4] - src[kIdx + 5] + src[kIdx + 6] + src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 18 * gap] = + 4./81. * ( + src[kIdx + 0] - src[kIdx + 1] + src[kIdx + 2] - src[kIdx + 3] + src[kIdx + 4] - src[kIdx + 5] + src[kIdx + 6] - src[kIdx + 7] + src[kIdx + 8]);
        dst[gIdx + 19 * gap] = + 2./405. * ( - src[kIdx + 1] + src[kIdx + 4] - src[kIdx + 7]) + 4./405. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 20 * gap] = + 2./405. * ( + src[kIdx + 1] - src[kIdx + 4] + src[kIdx + 7]) + 4./405. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 21 * gap] = + 16./405. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]) + 32./405. * ( - src[kIdx + 1] + src[kIdx + 4] - src[kIdx + 7]) + 64./405. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 22 * gap] = + 16./405. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]) + 32./405. * ( + src[kIdx + 1] - src[kIdx + 4] + src[kIdx + 7]) + 64./405. * ( - src[kIdx + 0] + src[kIdx + 3] - src[kIdx + 6]);
        dst[gIdx + 23 * gap] = + 2./9. * ( - src[kIdx + 2] + src[kIdx + 5] - src[kIdx + 8]);
        dst[gIdx + 24 * gap] = + 2./45. * ( + src[kIdx + 6]) + 1./90. * ( + src[kIdx + 0]) + 1./45. * ( + src[kIdx + 3]);
        dst[gIdx + 25 * gap] = + 2./405. * ( - src[kIdx + 3] - src[kIdx + 4] - src[kIdx + 5]) + 4./405. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 26 * gap] = + 2./405. * ( - src[kIdx + 3] + src[kIdx + 4] - src[kIdx + 5]) + 4./405. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 27 * gap] = + 2./2025. * ( + src[kIdx + 5] + src[kIdx + 7]) + 1./4050. * ( + src[kIdx + 1] + src[kIdx + 3]) + 1./8100. * ( + src[kIdx + 0]) + 4./2025. * ( + src[kIdx + 8]) + 1./2025. * ( + src[kIdx + 2] + src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 28 * gap] = + 2./2025. * ( + src[kIdx + 5] - src[kIdx + 7]) + 1./4050. * ( - src[kIdx + 1] + src[kIdx + 3]) + 1./8100. * ( + src[kIdx + 0]) + 4./2025. * ( + src[kIdx + 8]) + 1./2025. * ( + src[kIdx + 2] - src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 29 * gap] = + 32./2025. * ( + src[kIdx + 3] + src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] + src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 6]) + 8./2025. * ( + src[kIdx + 1] + src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 2]);
        dst[gIdx + 30 * gap] = + 32./2025. * ( + src[kIdx + 3] - src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] - src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 6]) + 8./2025. * ( - src[kIdx + 1] + src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 2]);
        dst[gIdx + 31 * gap] = + 2./45. * ( + src[kIdx + 8]) + 1./90. * ( + src[kIdx + 2]) + 1./45. * ( + src[kIdx + 5]);
        dst[gIdx + 32 * gap] = + 2./45. * ( + src[kIdx + 6]) + 1./90. * ( + src[kIdx + 0]) + 1./45. * ( - src[kIdx + 3]);
        dst[gIdx + 33 * gap] = + 2./405. * ( + src[kIdx + 3] + src[kIdx + 4] + src[kIdx + 5]) + 4./405. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 34 * gap] = + 2./405. * ( + src[kIdx + 3] - src[kIdx + 4] + src[kIdx + 5]) + 4./405. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]) + 1./405. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 35 * gap] = + 2./2025. * ( - src[kIdx + 5] + src[kIdx + 7]) + 1./4050. * ( + src[kIdx + 1] - src[kIdx + 3]) + 1./8100. * ( + src[kIdx + 0]) + 4./2025. * ( + src[kIdx + 8]) + 1./2025. * ( + src[kIdx + 2] - src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 36 * gap] = + 2./2025. * ( - src[kIdx + 5] - src[kIdx + 7]) + 1./4050. * ( - src[kIdx + 1] - src[kIdx + 3]) + 1./8100. * ( + src[kIdx + 0]) + 4./2025. * ( + src[kIdx + 8]) + 1./2025. * ( + src[kIdx + 2] + src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 37 * gap] = + 32./2025. * ( - src[kIdx + 3] + src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] - src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 6]) + 8./2025. * ( + src[kIdx + 1] - src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 2]);
        dst[gIdx + 38 * gap] = + 32./2025. * ( - src[kIdx + 3] - src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] + src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 6]) + 8./2025. * ( - src[kIdx + 1] - src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 2]);
        dst[gIdx + 39 * gap] = + 2./45. * ( + src[kIdx + 8]) + 1./90. * ( + src[kIdx + 2]) + 1./45. * ( - src[kIdx + 5]);
        dst[gIdx + 40 * gap] = + 16./45. * ( + src[kIdx + 3]) + 32./45. * ( + src[kIdx + 0]) + 8./45. * ( + src[kIdx + 6]);
        dst[gIdx + 41 * gap] = + 16./405. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]) + 32./405. * ( - src[kIdx + 3] - src[kIdx + 4] - src[kIdx + 5]) + 64./405. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 42 * gap] = + 16./405. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]) + 32./405. * ( - src[kIdx + 3] + src[kIdx + 4] - src[kIdx + 5]) + 64./405. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 43 * gap] = + 8./2025. * ( + src[kIdx + 3] + src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] + src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 2]) + 32./2025. * ( + src[kIdx + 1] + src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 6]);
        dst[gIdx + 44 * gap] = + 8./2025. * ( + src[kIdx + 3] - src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] - src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 2]) + 32./2025. * ( - src[kIdx + 1] + src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 6]);
        dst[gIdx + 45 * gap] = + 1024./2025. * ( + src[kIdx + 0]) + 128./2025. * ( + src[kIdx + 5] + src[kIdx + 7]) + 64./2025. * ( + src[kIdx + 8]) + 512./2025. * ( + src[kIdx + 1] + src[kIdx + 3]) + 256./2025. * ( + src[kIdx + 2] + src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 46 * gap] = + 1024./2025. * ( + src[kIdx + 0]) + 128./2025. * ( + src[kIdx + 5] - src[kIdx + 7]) + 64./2025. * ( + src[kIdx + 8]) + 512./2025. * ( - src[kIdx + 1] + src[kIdx + 3]) + 256./2025. * ( + src[kIdx + 2] - src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 47 * gap] = + 16./45. * ( + src[kIdx + 5]) + 32./45. * ( + src[kIdx + 2]) + 8./45. * ( + src[kIdx + 8]);
        dst[gIdx + 48 * gap] = + 16./45. * ( - src[kIdx + 3]) + 32./45. * ( + src[kIdx + 0]) + 8./45. * ( + src[kIdx + 6]);
        dst[gIdx + 49 * gap] = + 16./405. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]) + 32./405. * ( + src[kIdx + 3] + src[kIdx + 4] + src[kIdx + 5]) + 64./405. * ( - src[kIdx + 0] - src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 50 * gap] = + 16./405. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]) + 32./405. * ( + src[kIdx + 3] - src[kIdx + 4] + src[kIdx + 5]) + 64./405. * ( - src[kIdx + 0] + src[kIdx + 1] - src[kIdx + 2]);
        dst[gIdx + 51 * gap] = + 8./2025. * ( - src[kIdx + 3] + src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] - src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 2]) + 32./2025. * ( + src[kIdx + 1] - src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 6]);
        dst[gIdx + 52 * gap] = + 8./2025. * ( - src[kIdx + 3] - src[kIdx + 7]) + 16./2025. * ( + src[kIdx + 0] + src[kIdx + 4] + src[kIdx + 8]) + 64./2025. * ( + src[kIdx + 2]) + 32./2025. * ( - src[kIdx + 1] - src[kIdx + 5]) + 4./2025. * ( + src[kIdx + 6]);
        dst[gIdx + 53 * gap] = + 1024./2025. * ( + src[kIdx + 0]) + 128./2025. * ( - src[kIdx + 5] + src[kIdx + 7]) + 64./2025. * ( + src[kIdx + 8]) + 512./2025. * ( + src[kIdx + 1] - src[kIdx + 3]) + 256./2025. * ( + src[kIdx + 2] - src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 54 * gap] = + 1024./2025. * ( + src[kIdx + 0]) + 128./2025. * ( - src[kIdx + 5] - src[kIdx + 7]) + 64./2025. * ( + src[kIdx + 8]) + 512./2025. * ( - src[kIdx + 1] - src[kIdx + 3]) + 256./2025. * ( + src[kIdx + 2] + src[kIdx + 4] + src[kIdx + 6]);
        dst[gIdx + 55 * gap] = + 16./45. * ( - src[kIdx + 5]) + 32./45. * ( + src[kIdx + 2]) + 8./45. * ( + src[kIdx + 8]);
        dst[gIdx + 56 * gap] = + 1./1. * ( + src[kIdx + 6]);
        dst[gIdx + 57 * gap] = + 2./9. * ( - src[kIdx + 6] - src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 58 * gap] = + 2./9. * ( - src[kIdx + 6] + src[kIdx + 7] - src[kIdx + 8]);
        dst[gIdx + 59 * gap] = + 2./45. * ( + src[kIdx + 8]) + 1./90. * ( + src[kIdx + 6]) + 1./45. * ( + src[kIdx + 7]);
        dst[gIdx + 60 * gap] = + 2./45. * ( + src[kIdx + 8]) + 1./90. * ( + src[kIdx + 6]) + 1./45. * ( - src[kIdx + 7]);
        dst[gIdx + 61 * gap] = + 16./45. * ( + src[kIdx + 7]) + 32./45. * ( + src[kIdx + 6]) + 8./45. * ( + src[kIdx + 8]);
        dst[gIdx + 62 * gap] = + 16./45. * ( - src[kIdx + 7]) + 32./45. * ( + src[kIdx + 6]) + 8./45. * ( + src[kIdx + 8]);
        dst[gIdx + 63 * gap] = + 1./1. * ( + src[kIdx + 8]);
	}
}

template <typename Dtype> 
__global__ void winoSrc_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int tileH, int tileW, int inputs, int batchs, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int gap = tileH * tileW * inputs * batchs;
		int batchIdx = idx / (tileH * tileW * inputs);
		int inputIdx = (idx / (tileH * tileW)) % inputs ;
		int yIdx = (idx % (tileH * tileW)) / tileW ;
		int xIdx = idx % tileW;
		int bIdx =  idx % gap;
		int sIdx = batchIdx * inputs * dataW * dataH + inputIdx * dataW * dataH + yIdx * dataW * 2 + xIdx * 2;

        dst[bIdx + 0 * gap] = + 1./1. * ( + src[sIdx + 0 * dataW + 0] - src[sIdx + 0 * dataW + 2] - src[sIdx + 2 * dataW + 0] + src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 1 * gap] = + 1./1. * ( + src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 2] - src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 2 * gap] = + 1./1. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 2] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 3 * gap] = + 1./1. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 3] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 3]);
        dst[bIdx + 4 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 0] - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 5 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 6 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 7 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3]);
        dst[bIdx + 8 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 9 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 10 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 11 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3]);
        dst[bIdx + 12 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 1 * dataW + 2] + src[sIdx + 3 * dataW + 0] - src[sIdx + 3 * dataW + 2]);
        dst[bIdx + 13 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2]);
        dst[bIdx + 14 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2]);
        dst[bIdx + 15 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 3]);
	}
}


template <typename Dtype> 
__global__ void wino4x4Src_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int tileH, int tileW, int inputs, int batchs, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int gap = tileH * tileW * inputs * batchs;
		int batchIdx = idx / (tileH * tileW * inputs);
		int inputIdx = (idx / (tileH * tileW)) % inputs ;
		int yIdx = (idx % (tileH * tileW)) / tileW ;
		int xIdx = idx % tileW;
		int bIdx =  idx % gap;
		int sIdx = batchIdx * inputs * dataW * dataH + inputIdx * dataW * dataH + yIdx * dataW * 4 + xIdx * 4;

        dst[bIdx + 0 * gap] = + 1./1. * ( + src[sIdx + 4 * dataW + 4]) + 4./1. * ( + src[sIdx + 0 * dataW + 4] + src[sIdx + 4 * dataW + 0]) + 5./1. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 16./1. * ( + src[sIdx + 0 * dataW + 0]) + 20./1. * ( - src[sIdx + 0 * dataW + 2] - src[sIdx + 2 * dataW + 0]) + 25./1. * ( + src[sIdx + 2 * dataW + 2]);
        dst[bIdx + 1 * gap] = + 16./1. * ( - src[sIdx + 0 * dataW + 1] - src[sIdx + 0 * dataW + 2]) + 20./1. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]) + 4./1. * ( + src[sIdx + 0 * dataW + 3] + src[sIdx + 0 * dataW + 4] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]) + 5./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 1./1. * ( + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 2 * gap] = + 16./1. * ( + src[sIdx + 0 * dataW + 1] - src[sIdx + 0 * dataW + 2]) + 20./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]) + 4./1. * ( - src[sIdx + 0 * dataW + 3] + src[sIdx + 0 * dataW + 4] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]) + 5./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 1./1. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 3 * gap] = + 1./1. * ( - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 0 * dataW + 2] + src[sIdx + 0 * dataW + 4]) + 5./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4]) + 8./1. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 3]) + 10./1. * ( + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 3]);
        dst[bIdx + 4 * gap] = + 1./1. * ( - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 0 * dataW + 2] + src[sIdx + 0 * dataW + 4]) + 5./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4]) + 8./1. * ( + src[sIdx + 0 * dataW + 1] - src[sIdx + 0 * dataW + 3]) + 10./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3]);
        dst[bIdx + 5 * gap] = + 1./1. * ( + src[sIdx + 4 * dataW + 5]) + 4./1. * ( + src[sIdx + 0 * dataW + 5] + src[sIdx + 4 * dataW + 1]) + 5./1. * ( - src[sIdx + 2 * dataW + 5] - src[sIdx + 4 * dataW + 3]) + 16./1. * ( + src[sIdx + 0 * dataW + 1]) + 20./1. * ( - src[sIdx + 0 * dataW + 3] - src[sIdx + 2 * dataW + 1]) + 25./1. * ( + src[sIdx + 2 * dataW + 3]);
        dst[bIdx + 6 * gap] = + 16./1. * ( - src[sIdx + 1 * dataW + 0] - src[sIdx + 2 * dataW + 0]) + 4./1. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 0] + src[sIdx + 4 * dataW + 0]) + 20./1. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2]) + 5./1. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 1./1. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 7 * gap] = + 16./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]) + 1./1. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 4./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 8 * gap] = + 16./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]) + 1./1. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 4./1. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 9 * gap] = + 8./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 3]) + 1./1. * ( - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 3]) + 4./1. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4]);
        dst[bIdx + 10 * gap] = + 8./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3]) + 1./1. * ( - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 3]) + 4./1. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4]);
        dst[bIdx + 11 * gap] = + 16./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 2 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 2 * dataW + 5] + src[sIdx + 3 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 20./1. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 3]) + 5./1. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 3]) + 1./1. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 4 * dataW + 5]);
        dst[bIdx + 12 * gap] = + 16./1. * ( + src[sIdx + 1 * dataW + 0] - src[sIdx + 2 * dataW + 0]) + 4./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 0] + src[sIdx + 4 * dataW + 0]) + 20./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2]) + 5./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 1./1. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 13 * gap] = + 16./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]) + 1./1. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 4./1. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 14 * gap] = + 16./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2]) + 1./1. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 4./1. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 15 * gap] = + 8./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 3]) + 1./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4]);
        dst[bIdx + 16 * gap] = + 8./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3]) + 1./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4]);
        dst[bIdx + 17 * gap] = + 16./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 2 * dataW + 1]) + 4./1. * ( + src[sIdx + 1 * dataW + 5] - src[sIdx + 2 * dataW + 5] - src[sIdx + 3 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 20./1. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 3]) + 5./1. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 3]) + 1./1. * ( - src[sIdx + 3 * dataW + 5] + src[sIdx + 4 * dataW + 5]);
        dst[bIdx + 18 * gap] = + 1./1. * ( - src[sIdx + 2 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 4]) + 4./1. * ( - src[sIdx + 2 * dataW + 0] + src[sIdx + 4 * dataW + 0]) + 5./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 8./1. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 3 * dataW + 0]) + 10./1. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 3 * dataW + 2]);
        dst[bIdx + 19 * gap] = + 8./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] - src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2]) + 1./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4]) + 4./1. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 20 * gap] = + 8./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2]) + 1./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 21 * gap] = + 1./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 3] - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 3]) + 4./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 22 * gap] = + 1./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3] - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 23 * gap] = + 1./1. * ( - src[sIdx + 2 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 2./1. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 3 * dataW + 5]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 5./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 3]) + 8./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 3 * dataW + 1]) + 10./1. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 24 * gap] = + 1./1. * ( - src[sIdx + 2 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 4]) + 4./1. * ( - src[sIdx + 2 * dataW + 0] + src[sIdx + 4 * dataW + 0]) + 5./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 8./1. * ( + src[sIdx + 1 * dataW + 0] - src[sIdx + 3 * dataW + 0]) + 10./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 3 * dataW + 2]);
        dst[bIdx + 25 * gap] = + 8./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2]) + 1./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]) + 4./1. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 26 * gap] = + 8./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2]) + 1./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2]);
        dst[bIdx + 27 * gap] = + 1./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 3] + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 28 * gap] = + 1./1. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]) + 2./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 3] + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 3]) + 4./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 29 * gap] = + 1./1. * ( - src[sIdx + 2 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 2./1. * ( + src[sIdx + 1 * dataW + 5] - src[sIdx + 3 * dataW + 5]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 5./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 3]) + 8./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 3 * dataW + 1]) + 10./1. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 30 * gap] = + 1./1. * ( + src[sIdx + 5 * dataW + 4]) + 4./1. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 5 * dataW + 0]) + 5./1. * ( - src[sIdx + 3 * dataW + 4] - src[sIdx + 5 * dataW + 2]) + 16./1. * ( + src[sIdx + 1 * dataW + 0]) + 20./1. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 3 * dataW + 0]) + 25./1. * ( + src[sIdx + 3 * dataW + 2]);
        dst[bIdx + 31 * gap] = + 16./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2]) + 20./1. * ( + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2]) + 4./1. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] - src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2]) + 5./1. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]) + 1./1. * ( + src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]);
        dst[bIdx + 32 * gap] = + 16./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2]) + 20./1. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2]) + 4./1. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2]) + 5./1. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]) + 1./1. * ( - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]);
        dst[bIdx + 33 * gap] = + 1./1. * ( - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 2./1. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 3]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4]) + 5./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4]) + 8./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 3]) + 10./1. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 34 * gap] = + 1./1. * ( - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 2./1. * ( + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 3]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4]) + 5./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4]) + 8./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 3]) + 10./1. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 35 * gap] = + 1./1. * ( + src[sIdx + 5 * dataW + 5]) + 4./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 5 * dataW + 1]) + 5./1. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 3]) + 16./1. * ( + src[sIdx + 1 * dataW + 1]) + 20./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1]) + 25./1. * ( + src[sIdx + 3 * dataW + 3]);
	}
}

template <typename Dtype> 
__global__ void wino6x6Src_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int tileH, int tileW, int inputs, int batchs, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int gap = tileH * tileW * inputs * batchs;
		int batchIdx = idx / (tileH * tileW * inputs);
		int inputIdx = (idx / (tileH * tileW)) % inputs ;
		int yIdx = (idx % (tileH * tileW)) / tileW ;
		int xIdx = idx % tileW;
		int bIdx =  idx % gap;
		int sIdx = batchIdx * inputs * dataW * dataH + inputIdx * dataW * dataH + yIdx * dataW * 6 + xIdx * 6;

        dst[bIdx + 0 * gap] = + 21./4. * ( - src[sIdx + 0 * dataW + 2] + src[sIdx + 0 * dataW + 4] - src[sIdx + 2 * dataW + 0] + src[sIdx + 2 * dataW + 6] + src[sIdx + 4 * dataW + 0] - src[sIdx + 4 * dataW + 6] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 4]) + 1./1. * ( + src[sIdx + 0 * dataW + 0] - src[sIdx + 0 * dataW + 6] - src[sIdx + 6 * dataW + 0] + src[sIdx + 6 * dataW + 6]) + 441./16. * ( + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 1 * gap] = + 21./4. * ( - src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] - src[sIdx + 2 * dataW + 6] + src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] + src[sIdx + 4 * dataW + 6]) + 1./1. * ( + src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 2] + src[sIdx + 0 * dataW + 5] + src[sIdx + 0 * dataW + 6] - src[sIdx + 6 * dataW + 1] - src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] - src[sIdx + 6 * dataW + 6]) + 357./16. * ( + src[sIdx + 2 * dataW + 3] + src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 3] - src[sIdx + 4 * dataW + 4]) + 17./4. * ( - src[sIdx + 0 * dataW + 3] - src[sIdx + 0 * dataW + 4] + src[sIdx + 6 * dataW + 3] + src[sIdx + 6 * dataW + 4]);
        dst[bIdx + 2 * gap] = + 21./4. * ( + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] - src[sIdx + 2 * dataW + 6] - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] + src[sIdx + 4 * dataW + 6]) + 1./1. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 2] - src[sIdx + 0 * dataW + 5] + src[sIdx + 0 * dataW + 6] + src[sIdx + 6 * dataW + 1] - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] - src[sIdx + 6 * dataW + 6]) + 357./16. * ( - src[sIdx + 2 * dataW + 3] + src[sIdx + 2 * dataW + 4] + src[sIdx + 4 * dataW + 3] - src[sIdx + 4 * dataW + 4]) + 17./4. * ( + src[sIdx + 0 * dataW + 3] - src[sIdx + 0 * dataW + 4] - src[sIdx + 6 * dataW + 3] + src[sIdx + 6 * dataW + 4]);
        dst[bIdx + 3 * gap] = + 105./16. * ( + src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 4]) + 1./2. * ( + src[sIdx + 0 * dataW + 1] - src[sIdx + 6 * dataW + 1]) + 2./1. * ( + src[sIdx + 0 * dataW + 5] - src[sIdx + 6 * dataW + 5]) + 1./4. * ( + src[sIdx + 0 * dataW + 2] - src[sIdx + 6 * dataW + 2]) + 21./2. * ( - src[sIdx + 2 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 1./1. * ( + src[sIdx + 0 * dataW + 6] - src[sIdx + 6 * dataW + 6]) + 5./4. * ( - src[sIdx + 0 * dataW + 4] + src[sIdx + 6 * dataW + 4]) + 105./8. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 3]) + 5./2. * ( - src[sIdx + 0 * dataW + 3] + src[sIdx + 6 * dataW + 3]) + 21./4. * ( - src[sIdx + 2 * dataW + 6] + src[sIdx + 4 * dataW + 6]) + 21./16. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 4 * dataW + 2]) + 21./8. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 4 * dataW + 1]);
        dst[bIdx + 4 * gap] = + 105./16. * ( + src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 4]) + 1./2. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 6 * dataW + 1]) + 2./1. * ( - src[sIdx + 0 * dataW + 5] + src[sIdx + 6 * dataW + 5]) + 1./4. * ( + src[sIdx + 0 * dataW + 2] - src[sIdx + 6 * dataW + 2]) + 21./2. * ( + src[sIdx + 2 * dataW + 5] - src[sIdx + 4 * dataW + 5]) + 1./1. * ( + src[sIdx + 0 * dataW + 6] - src[sIdx + 6 * dataW + 6]) + 5./4. * ( - src[sIdx + 0 * dataW + 4] + src[sIdx + 6 * dataW + 4]) + 105./8. * ( - src[sIdx + 2 * dataW + 3] + src[sIdx + 4 * dataW + 3]) + 5./2. * ( + src[sIdx + 0 * dataW + 3] - src[sIdx + 6 * dataW + 3]) + 21./4. * ( - src[sIdx + 2 * dataW + 6] + src[sIdx + 4 * dataW + 6]) + 21./16. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 4 * dataW + 2]) + 21./8. * ( + src[sIdx + 2 * dataW + 1] - src[sIdx + 4 * dataW + 1]);
        dst[bIdx + 5 * gap] = + 1./2. * ( + src[sIdx + 0 * dataW + 5] - src[sIdx + 6 * dataW + 5]) + 2./1. * ( + src[sIdx + 0 * dataW + 1] - src[sIdx + 6 * dataW + 1]) + 4./1. * ( + src[sIdx + 0 * dataW + 2] - src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 0 * dataW + 4] + src[sIdx + 6 * dataW + 4]) + 21./2. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 1./1. * ( + src[sIdx + 0 * dataW + 6] - src[sIdx + 6 * dataW + 6]) + 105./8. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 3]) + 105./4. * ( + src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 4]) + 21./1. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 4 * dataW + 2]) + 5./2. * ( - src[sIdx + 0 * dataW + 3] + src[sIdx + 6 * dataW + 3]) + 21./4. * ( - src[sIdx + 2 * dataW + 6] + src[sIdx + 4 * dataW + 6]) + 21./8. * ( - src[sIdx + 2 * dataW + 5] + src[sIdx + 4 * dataW + 5]);
        dst[bIdx + 6 * gap] = + 1./2. * ( - src[sIdx + 0 * dataW + 5] + src[sIdx + 6 * dataW + 5]) + 2./1. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 6 * dataW + 1]) + 4./1. * ( + src[sIdx + 0 * dataW + 2] - src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 0 * dataW + 4] + src[sIdx + 6 * dataW + 4]) + 21./2. * ( + src[sIdx + 2 * dataW + 1] - src[sIdx + 4 * dataW + 1]) + 1./1. * ( + src[sIdx + 0 * dataW + 6] - src[sIdx + 6 * dataW + 6]) + 105./8. * ( - src[sIdx + 2 * dataW + 3] + src[sIdx + 4 * dataW + 3]) + 105./4. * ( + src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 4]) + 21./1. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 4 * dataW + 2]) + 5./2. * ( + src[sIdx + 0 * dataW + 3] - src[sIdx + 6 * dataW + 3]) + 21./4. * ( - src[sIdx + 2 * dataW + 6] + src[sIdx + 4 * dataW + 6]) + 21./8. * ( + src[sIdx + 2 * dataW + 5] - src[sIdx + 4 * dataW + 5]);
        dst[bIdx + 7 * gap] = + 21./4. * ( + src[sIdx + 0 * dataW + 3] - src[sIdx + 0 * dataW + 5] + src[sIdx + 2 * dataW + 1] - src[sIdx + 2 * dataW + 7] - src[sIdx + 4 * dataW + 1] + src[sIdx + 4 * dataW + 7] - src[sIdx + 6 * dataW + 3] + src[sIdx + 6 * dataW + 5]) + 1./1. * ( - src[sIdx + 0 * dataW + 1] + src[sIdx + 0 * dataW + 7] + src[sIdx + 6 * dataW + 1] - src[sIdx + 6 * dataW + 7]) + 441./16. * ( - src[sIdx + 2 * dataW + 3] + src[sIdx + 2 * dataW + 5] + src[sIdx + 4 * dataW + 3] - src[sIdx + 4 * dataW + 5]);
        dst[bIdx + 8 * gap] = + 21./4. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 4] - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 4]) + 1./1. * ( + src[sIdx + 1 * dataW + 0] - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 0] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 0] - src[sIdx + 6 * dataW + 6]) + 357./16. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 4]) + 17./4. * ( - src[sIdx + 3 * dataW + 0] + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 0] + src[sIdx + 4 * dataW + 6]);
        dst[bIdx + 9 * gap] = + 289./16. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 1./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./4. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6] - src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]);
        dst[bIdx + 10 * gap] = + 289./16. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] + src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./4. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] - src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6] + src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 4] + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]);
        dst[bIdx + 11 * gap] = + 17./8. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 1]) + 1./2. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 1] + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 1]) + 2./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 5]) + 1./4. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 1./1. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 17./2. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 5]) + 17./16. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 3] - src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 3]) + 85./16. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 12 * gap] = + 17./8. * ( + src[sIdx + 3 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 1./2. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 2 * dataW + 1] - src[sIdx + 5 * dataW + 1] - src[sIdx + 6 * dataW + 1]) + 2./1. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 5] - src[sIdx + 6 * dataW + 5]) + 1./4. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 1./1. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 17./2. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 17./16. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 3] + src[sIdx + 5 * dataW + 3] + src[sIdx + 6 * dataW + 3]) + 85./16. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 13 * gap] = + 17./8. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 5]) + 1./2. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 5]) + 2./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 1] + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 1]) + 4./1. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 1./1. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 1]) + 17./1. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 3] - src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 3]) + 85./4. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 14 * gap] = + 17./8. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 1./2. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 5] - src[sIdx + 6 * dataW + 5]) + 2./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 2 * dataW + 1] - src[sIdx + 5 * dataW + 1] - src[sIdx + 6 * dataW + 1]) + 4./1. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 1./1. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( + src[sIdx + 3 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 17./1. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 3] + src[sIdx + 5 * dataW + 3] + src[sIdx + 6 * dataW + 3]) + 85./4. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 15 * gap] = + 21./4. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 5]) + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 7] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 7] - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 7] - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 7]) + 357./16. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 17./4. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 7] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 7]);
        dst[bIdx + 16 * gap] = + 21./4. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 4] + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 4]) + 1./1. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 0] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 0] - src[sIdx + 6 * dataW + 6]) + 357./16. * ( - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 4]) + 17./4. * ( + src[sIdx + 3 * dataW + 0] - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 0] + src[sIdx + 4 * dataW + 6]);
        dst[bIdx + 17 * gap] = + 289./16. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 1./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./4. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6] + src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]);
        dst[bIdx + 18 * gap] = + 289./16. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6] + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./4. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6] - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4] + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]);
        dst[bIdx + 19 * gap] = + 17./8. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 1]) + 1./2. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 1] - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 1]) + 2./1. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 5]) + 1./4. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 17./2. * ( + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 5]) + 17./16. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 3] + src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 3]) + 85./16. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 20 * gap] = + 17./8. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 1./2. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 2 * dataW + 1] + src[sIdx + 5 * dataW + 1] - src[sIdx + 6 * dataW + 1]) + 2./1. * ( + src[sIdx + 1 * dataW + 5] - src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 5] - src[sIdx + 6 * dataW + 5]) + 1./4. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 17./2. * ( - src[sIdx + 3 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 17./16. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 3] - src[sIdx + 5 * dataW + 3] + src[sIdx + 6 * dataW + 3]) + 85./16. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 21 * gap] = + 17./8. * ( + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 5]) + 1./2. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 5]) + 2./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 1] - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 1]) + 17./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 3] + src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 3]) + 85./4. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 22 * gap] = + 17./8. * ( - src[sIdx + 3 * dataW + 5] + src[sIdx + 4 * dataW + 5]) + 1./2. * ( + src[sIdx + 1 * dataW + 5] - src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 5] - src[sIdx + 6 * dataW + 5]) + 2./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 2 * dataW + 1] + src[sIdx + 5 * dataW + 1] - src[sIdx + 6 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 4] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 4]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 6] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 4 * dataW + 1]) + 17./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 2]) + 17./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 6]) + 5./2. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 2 * dataW + 3] - src[sIdx + 5 * dataW + 3] + src[sIdx + 6 * dataW + 3]) + 85./4. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 4 * dataW + 3]);
        dst[bIdx + 23 * gap] = + 21./4. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 5]) + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 7] - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 7] + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 7] - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 7]) + 357./16. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 17./4. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 7] + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 7]);
        dst[bIdx + 24 * gap] = + 105./16. * ( + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 4]) + 1./2. * ( + src[sIdx + 1 * dataW + 0] - src[sIdx + 1 * dataW + 6]) + 2./1. * ( + src[sIdx + 5 * dataW + 0] - src[sIdx + 5 * dataW + 6]) + 1./4. * ( + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 6]) + 21./2. * ( - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 1./1. * ( + src[sIdx + 6 * dataW + 0] - src[sIdx + 6 * dataW + 6]) + 105./8. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4]) + 5./4. * ( - src[sIdx + 4 * dataW + 0] + src[sIdx + 4 * dataW + 6]) + 5./2. * ( - src[sIdx + 3 * dataW + 0] + src[sIdx + 3 * dataW + 6]) + 21./4. * ( - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 4]) + 21./16. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 4]) + 21./8. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4]);
        dst[bIdx + 25 * gap] = + 17./8. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4]) + 1./2. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] + src[sIdx + 1 * dataW + 6]) + 2./1. * ( + src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 5 * dataW + 6]) + 1./4. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 1./1. * ( + src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./16. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./2. * ( - src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 4]) + 5./4. * ( - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 17./4. * ( - src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] - src[sIdx + 3 * dataW + 6]) + 85./16. * ( + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 26 * gap] = + 17./8. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4]) + 1./2. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] + src[sIdx + 1 * dataW + 6]) + 2./1. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 5 * dataW + 6]) + 1./4. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./16. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./2. * ( + src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 4]) + 5./4. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 17./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] - src[sIdx + 3 * dataW + 6]) + 85./16. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 27 * gap] = + 1./2. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 1]) + 2./1. * ( + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 5]) + 1./4. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 3]) + 1./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 5./8. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 1]) + 25./16. * ( + src[sIdx + 4 * dataW + 4]) + 1./8. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1]) + 25./8. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3]) + 5./16. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 5] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 3]) + 1./16. * ( + src[sIdx + 2 * dataW + 2]) + 4./1. * ( + src[sIdx + 5 * dataW + 5]) + 25./4. * ( + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 28 * gap] = + 1./2. * ( + src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 2] - src[sIdx + 6 * dataW + 1]) + 2./1. * ( + src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 5]) + 1./4. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 5 * dataW + 3]) + 1./1. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 5./8. * ( - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] - src[sIdx + 3 * dataW + 2] + src[sIdx + 4 * dataW + 1]) + 25./16. * ( + src[sIdx + 4 * dataW + 4]) + 1./8. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1]) + 25./8. * ( + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3]) + 5./16. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( - src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 5] - src[sIdx + 5 * dataW + 4] + src[sIdx + 6 * dataW + 3]) + 1./16. * ( + src[sIdx + 2 * dataW + 2]) + 4./1. * ( - src[sIdx + 5 * dataW + 5]) + 25./4. * ( - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 29 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 1]) + 1./4. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 1] + src[sIdx + 6 * dataW + 5]) + 5./4. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 10./1. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 4]) + 5./8. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 5]) + 1./8. * ( + src[sIdx + 2 * dataW + 5]) + 8./1. * ( + src[sIdx + 5 * dataW + 2]) + 25./2. * ( + src[sIdx + 3 * dataW + 4]) + 5./2. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 1] - src[sIdx + 6 * dataW + 3]) + 25./8. * ( + src[sIdx + 4 * dataW + 3]) + 4./1. * ( + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 30 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 1]) + 1./4. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( + src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 1] - src[sIdx + 6 * dataW + 5]) + 5./4. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 10./1. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 4]) + 5./8. * ( + src[sIdx + 2 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 1./8. * ( - src[sIdx + 2 * dataW + 5]) + 8./1. * ( + src[sIdx + 5 * dataW + 2]) + 25./2. * ( + src[sIdx + 3 * dataW + 4]) + 5./2. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 1] + src[sIdx + 6 * dataW + 3]) + 25./8. * ( - src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 31 * gap] = + 105./16. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 1./2. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 7]) + 2./1. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 7]) + 1./4. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 7]) + 21./2. * ( + src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 5]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 7]) + 105./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 5]) + 5./4. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 7]) + 5./2. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 7]) + 21./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 5]) + 21./16. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 5]) + 21./8. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 5]);
        dst[bIdx + 32 * gap] = + 105./16. * ( + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 4]) + 1./2. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 1 * dataW + 6]) + 2./1. * ( - src[sIdx + 5 * dataW + 0] + src[sIdx + 5 * dataW + 6]) + 1./4. * ( + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 6]) + 21./2. * ( + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 4]) + 1./1. * ( + src[sIdx + 6 * dataW + 0] - src[sIdx + 6 * dataW + 6]) + 105./8. * ( - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4]) + 5./4. * ( - src[sIdx + 4 * dataW + 0] + src[sIdx + 4 * dataW + 6]) + 5./2. * ( + src[sIdx + 3 * dataW + 0] - src[sIdx + 3 * dataW + 6]) + 21./4. * ( - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 4]) + 21./16. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 4]) + 21./8. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4]);
        dst[bIdx + 33 * gap] = + 17./8. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4]) + 1./2. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6]) + 2./1. * ( - src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6]) + 1./4. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 1./1. * ( + src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./16. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./2. * ( + src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]) + 5./4. * ( - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 17./4. * ( - src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6]) + 85./16. * ( + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 34 * gap] = + 17./8. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4]) + 1./2. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6]) + 2./1. * ( + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6]) + 1./4. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./16. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./2. * ( - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]) + 5./4. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 17./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6]) + 85./16. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 35 * gap] = + 1./2. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 1]) + 2./1. * ( - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 5]) + 1./4. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 5 * dataW + 3]) + 1./1. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 5./8. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 1]) + 25./16. * ( + src[sIdx + 4 * dataW + 4]) + 1./8. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1]) + 25./8. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3]) + 5./16. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 5] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 3]) + 1./16. * ( + src[sIdx + 2 * dataW + 2]) + 4./1. * ( - src[sIdx + 5 * dataW + 5]) + 25./4. * ( - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 36 * gap] = + 1./2. * ( - src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 2] - src[sIdx + 6 * dataW + 1]) + 2./1. * ( - src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 5]) + 1./4. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 3]) + 1./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 5./4. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 5./8. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] + src[sIdx + 3 * dataW + 2] + src[sIdx + 4 * dataW + 1]) + 25./16. * ( + src[sIdx + 4 * dataW + 4]) + 1./8. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1]) + 25./8. * ( - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3]) + 5./16. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( + src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 5] + src[sIdx + 5 * dataW + 4] + src[sIdx + 6 * dataW + 3]) + 1./16. * ( + src[sIdx + 2 * dataW + 2]) + 4./1. * ( + src[sIdx + 5 * dataW + 5]) + 25./4. * ( + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 37 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 1]) + 1./4. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 1] + src[sIdx + 6 * dataW + 5]) + 5./4. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 10./1. * ( + src[sIdx + 3 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 5./8. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 5]) + 1./8. * ( + src[sIdx + 2 * dataW + 5]) + 8./1. * ( - src[sIdx + 5 * dataW + 2]) + 25./2. * ( - src[sIdx + 3 * dataW + 4]) + 5./2. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 1] - src[sIdx + 6 * dataW + 3]) + 25./8. * ( + src[sIdx + 4 * dataW + 3]) + 4./1. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 38 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 1]) + 1./4. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( - src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 1] - src[sIdx + 6 * dataW + 5]) + 5./4. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 10./1. * ( + src[sIdx + 3 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 5./8. * ( + src[sIdx + 2 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 1./8. * ( - src[sIdx + 2 * dataW + 5]) + 8./1. * ( - src[sIdx + 5 * dataW + 2]) + 25./2. * ( - src[sIdx + 3 * dataW + 4]) + 5./2. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 1] + src[sIdx + 6 * dataW + 3]) + 25./8. * ( - src[sIdx + 4 * dataW + 3]) + 4./1. * ( + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 39 * gap] = + 105./16. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 1./2. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 7]) + 2./1. * ( + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 7]) + 1./4. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 7]) + 21./2. * ( - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 5]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 7]) + 105./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 5]) + 5./4. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 7]) + 5./2. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 7]) + 21./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 5]) + 21./16. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 5]) + 21./8. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 5]);
        dst[bIdx + 40 * gap] = + 1./2. * ( + src[sIdx + 5 * dataW + 0] - src[sIdx + 5 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 0] - src[sIdx + 1 * dataW + 6]) + 4./1. * ( + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 4 * dataW + 0] + src[sIdx + 4 * dataW + 6]) + 21./2. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 4]) + 1./1. * ( + src[sIdx + 6 * dataW + 0] - src[sIdx + 6 * dataW + 6]) + 105./8. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 4]) + 105./4. * ( + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 4]) + 21./1. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 4]) + 5./2. * ( - src[sIdx + 3 * dataW + 0] + src[sIdx + 3 * dataW + 6]) + 21./4. * ( - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 4]) + 21./8. * ( - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 4]);
        dst[bIdx + 41 * gap] = + 17./8. * ( - src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 4]) + 1./2. * ( + src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 5 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] + src[sIdx + 1 * dataW + 6]) + 4./1. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./1. * ( + src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4]) + 17./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./4. * ( - src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] - src[sIdx + 3 * dataW + 6]) + 85./4. * ( + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 42 * gap] = + 17./8. * ( + src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 4]) + 1./2. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 5 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] + src[sIdx + 1 * dataW + 6]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 4]) + 17./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] - src[sIdx + 3 * dataW + 6]) + 85./4. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 43 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 1] + src[sIdx + 6 * dataW + 5]) + 4./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./2. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 1]) + 8./1. * ( + src[sIdx + 2 * dataW + 5]) + 10./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 5]) + 5./8. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 4]) + 1./8. * ( + src[sIdx + 5 * dataW + 2]) + 5./4. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 25./2. * ( + src[sIdx + 4 * dataW + 3]) + 5./2. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 1] - src[sIdx + 6 * dataW + 3]) + 25./8. * ( + src[sIdx + 3 * dataW + 4]) + 1./4. * ( + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 44 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 1] - src[sIdx + 6 * dataW + 5]) + 4./1. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./2. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 1]) + 8./1. * ( - src[sIdx + 2 * dataW + 5]) + 10./1. * ( + src[sIdx + 2 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 5./8. * ( - src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 4]) + 1./8. * ( + src[sIdx + 5 * dataW + 2]) + 5./4. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 25./2. * ( - src[sIdx + 4 * dataW + 3]) + 5./2. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 1] + src[sIdx + 6 * dataW + 3]) + 25./8. * ( + src[sIdx + 3 * dataW + 4]) + 1./4. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 45 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 1]) + 4./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( + src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 5]) + 8./1. * ( + src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1]) + 10./1. * ( - src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] - src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 1]) + 16./1. * ( + src[sIdx + 2 * dataW + 2]) + 5./4. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 3]) + 25./2. * ( + src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3]) + 20./1. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( - src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 5] - src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 3]) + 25./1. * ( + src[sIdx + 4 * dataW + 4]) + 1./4. * ( + src[sIdx + 5 * dataW + 5]) + 25./4. * ( + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 46 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 5] + src[sIdx + 5 * dataW + 2] - src[sIdx + 6 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( + src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 5]) + 8./1. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1]) + 10./1. * ( - src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] - src[sIdx + 3 * dataW + 2] + src[sIdx + 4 * dataW + 1]) + 16./1. * ( + src[sIdx + 2 * dataW + 2]) + 5./4. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 5 * dataW + 3]) + 25./2. * ( + src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3]) + 20./1. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( - src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 5] - src[sIdx + 5 * dataW + 4] + src[sIdx + 6 * dataW + 3]) + 25./1. * ( + src[sIdx + 4 * dataW + 4]) + 1./4. * ( - src[sIdx + 5 * dataW + 5]) + 25./4. * ( - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 47 * gap] = + 1./2. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 5 * dataW + 7]) + 2./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 1 * dataW + 7]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 7]) + 5./1. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 7]) + 21./2. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 1 * dataW + 5]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 7]) + 105./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 3 * dataW + 5]) + 105./4. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 21./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 5]) + 5./2. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 3 * dataW + 7]) + 21./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 5]) + 21./8. * ( + src[sIdx + 5 * dataW + 3] - src[sIdx + 5 * dataW + 5]);
        dst[bIdx + 48 * gap] = + 1./2. * ( - src[sIdx + 5 * dataW + 0] + src[sIdx + 5 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 1 * dataW + 6]) + 4./1. * ( + src[sIdx + 2 * dataW + 0] - src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 4 * dataW + 0] + src[sIdx + 4 * dataW + 6]) + 21./2. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4]) + 1./1. * ( + src[sIdx + 6 * dataW + 0] - src[sIdx + 6 * dataW + 6]) + 105./8. * ( - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4]) + 105./4. * ( + src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 4]) + 21./1. * ( - src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 4]) + 5./2. * ( + src[sIdx + 3 * dataW + 0] - src[sIdx + 3 * dataW + 6]) + 21./4. * ( - src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 4]) + 21./8. * ( + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 4]);
        dst[bIdx + 49 * gap] = + 17./8. * ( + src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]) + 1./2. * ( - src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6]) + 4./1. * ( + src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./1. * ( + src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] + src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4]) + 17./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./4. * ( - src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6]) + 85./4. * ( + src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 50 * gap] = + 17./8. * ( - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]) + 1./2. * ( + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6]) + 2./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 2 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 4 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 2] - src[sIdx + 6 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 17./2. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4]) + 17./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 4]) + 17./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 5./2. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6]) + 85./4. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 4]) + 85./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4]);
        dst[bIdx + 51 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] - src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 1] + src[sIdx + 6 * dataW + 5]) + 4./1. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] + src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./2. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 1]) + 8./1. * ( + src[sIdx + 2 * dataW + 5]) + 10./1. * ( - src[sIdx + 2 * dataW + 3] - src[sIdx + 4 * dataW + 5]) + 5./8. * ( + src[sIdx + 3 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 1./8. * ( - src[sIdx + 5 * dataW + 2]) + 5./4. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] + src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 25./2. * ( + src[sIdx + 4 * dataW + 3]) + 5./2. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 1] - src[sIdx + 6 * dataW + 3]) + 25./8. * ( - src[sIdx + 3 * dataW + 4]) + 1./4. * ( - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 52 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 2] + src[sIdx + 5 * dataW + 5] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 1] - src[sIdx + 6 * dataW + 5]) + 4./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 2 * dataW + 6]) + 5./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 2 * dataW + 4] - src[sIdx + 3 * dataW + 5] - src[sIdx + 4 * dataW + 6]) + 1./2. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 1]) + 8./1. * ( - src[sIdx + 2 * dataW + 5]) + 10./1. * ( + src[sIdx + 2 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 5./8. * ( + src[sIdx + 3 * dataW + 2] + src[sIdx + 5 * dataW + 4]) + 1./8. * ( - src[sIdx + 5 * dataW + 2]) + 5./4. * ( - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 2] - src[sIdx + 5 * dataW + 3] - src[sIdx + 6 * dataW + 4]) + 25./2. * ( - src[sIdx + 4 * dataW + 3]) + 5./2. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 1] + src[sIdx + 6 * dataW + 3]) + 25./8. * ( - src[sIdx + 3 * dataW + 4]) + 1./4. * ( + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 2]) + 25./4. * ( + src[sIdx + 3 * dataW + 3] + src[sIdx + 4 * dataW + 4]);
        dst[bIdx + 53 * gap] = + 1./1. * ( - src[sIdx + 1 * dataW + 5] - src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 2] + src[sIdx + 6 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( - src[sIdx + 5 * dataW + 6] + src[sIdx + 6 * dataW + 5]) + 8./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 2 * dataW + 1]) + 10./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 2 * dataW + 3] + src[sIdx + 3 * dataW + 2] - src[sIdx + 4 * dataW + 1]) + 16./1. * ( + src[sIdx + 2 * dataW + 2]) + 5./4. * ( + src[sIdx + 3 * dataW + 5] + src[sIdx + 5 * dataW + 3]) + 25./2. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 4 * dataW + 3]) + 20./1. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 4 * dataW + 5] + src[sIdx + 5 * dataW + 4] - src[sIdx + 6 * dataW + 3]) + 25./1. * ( + src[sIdx + 4 * dataW + 4]) + 1./4. * ( - src[sIdx + 5 * dataW + 5]) + 25./4. * ( - src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 54 * gap] = + 1./1. * ( + src[sIdx + 1 * dataW + 5] + src[sIdx + 5 * dataW + 1] + src[sIdx + 6 * dataW + 6]) + 2./1. * ( - src[sIdx + 1 * dataW + 6] - src[sIdx + 2 * dataW + 5] - src[sIdx + 5 * dataW + 2] - src[sIdx + 6 * dataW + 1]) + 4./1. * ( + src[sIdx + 1 * dataW + 1] + src[sIdx + 2 * dataW + 6] + src[sIdx + 6 * dataW + 2]) + 5./1. * ( - src[sIdx + 1 * dataW + 3] - src[sIdx + 3 * dataW + 1] - src[sIdx + 4 * dataW + 6] - src[sIdx + 6 * dataW + 4]) + 1./2. * ( - src[sIdx + 5 * dataW + 6] - src[sIdx + 6 * dataW + 5]) + 8./1. * ( - src[sIdx + 1 * dataW + 2] - src[sIdx + 2 * dataW + 1]) + 10./1. * ( + src[sIdx + 1 * dataW + 4] + src[sIdx + 2 * dataW + 3] + src[sIdx + 3 * dataW + 2] + src[sIdx + 4 * dataW + 1]) + 16./1. * ( + src[sIdx + 2 * dataW + 2]) + 5./4. * ( - src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 3]) + 25./2. * ( - src[sIdx + 3 * dataW + 4] - src[sIdx + 4 * dataW + 3]) + 20./1. * ( - src[sIdx + 2 * dataW + 4] - src[sIdx + 4 * dataW + 2]) + 5./2. * ( + src[sIdx + 3 * dataW + 6] + src[sIdx + 4 * dataW + 5] + src[sIdx + 5 * dataW + 4] + src[sIdx + 6 * dataW + 3]) + 25./1. * ( + src[sIdx + 4 * dataW + 4]) + 1./4. * ( + src[sIdx + 5 * dataW + 5]) + 25./4. * ( + src[sIdx + 3 * dataW + 3]);
        dst[bIdx + 55 * gap] = + 1./2. * ( + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 7]) + 2./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 7]) + 4./1. * ( - src[sIdx + 2 * dataW + 1] + src[sIdx + 2 * dataW + 7]) + 5./1. * ( + src[sIdx + 4 * dataW + 1] - src[sIdx + 4 * dataW + 7]) + 21./2. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 5]) + 1./1. * ( - src[sIdx + 6 * dataW + 1] + src[sIdx + 6 * dataW + 7]) + 105./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 5]) + 105./4. * ( - src[sIdx + 4 * dataW + 3] + src[sIdx + 4 * dataW + 5]) + 21./1. * ( + src[sIdx + 2 * dataW + 3] - src[sIdx + 2 * dataW + 5]) + 5./2. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 7]) + 21./4. * ( + src[sIdx + 6 * dataW + 3] - src[sIdx + 6 * dataW + 5]) + 21./8. * ( - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 5]);
        dst[bIdx + 56 * gap] = + 21./4. * ( + src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 4] + src[sIdx + 3 * dataW + 0] - src[sIdx + 3 * dataW + 6] - src[sIdx + 5 * dataW + 0] + src[sIdx + 5 * dataW + 6] - src[sIdx + 7 * dataW + 2] + src[sIdx + 7 * dataW + 4]) + 1./1. * ( - src[sIdx + 1 * dataW + 0] + src[sIdx + 1 * dataW + 6] + src[sIdx + 7 * dataW + 0] - src[sIdx + 7 * dataW + 6]) + 441./16. * ( - src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 4] + src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 4]);
        dst[bIdx + 57 * gap] = + 21./4. * ( + src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] + src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6] - src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] - src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6]) + 1./1. * ( - src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] - src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6] + src[sIdx + 7 * dataW + 1] + src[sIdx + 7 * dataW + 2] + src[sIdx + 7 * dataW + 5] + src[sIdx + 7 * dataW + 6]) + 357./16. * ( - src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4] + src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]) + 17./4. * ( + src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] - src[sIdx + 7 * dataW + 3] - src[sIdx + 7 * dataW + 4]);
        dst[bIdx + 58 * gap] = + 21./4. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 2] - src[sIdx + 3 * dataW + 5] + src[sIdx + 3 * dataW + 6] + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 2] + src[sIdx + 5 * dataW + 5] - src[sIdx + 5 * dataW + 6]) + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 2] + src[sIdx + 1 * dataW + 5] - src[sIdx + 1 * dataW + 6] - src[sIdx + 7 * dataW + 1] + src[sIdx + 7 * dataW + 2] - src[sIdx + 7 * dataW + 5] + src[sIdx + 7 * dataW + 6]) + 357./16. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 4] - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 4]) + 17./4. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 4] + src[sIdx + 7 * dataW + 3] - src[sIdx + 7 * dataW + 4]);
        dst[bIdx + 59 * gap] = + 105./16. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 5 * dataW + 4]) + 1./2. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 7 * dataW + 1]) + 2./1. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 7 * dataW + 5]) + 1./4. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 7 * dataW + 2]) + 21./2. * ( + src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 5]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 7 * dataW + 6]) + 5./4. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 7 * dataW + 4]) + 105./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 5 * dataW + 3]) + 5./2. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 7 * dataW + 3]) + 21./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 5 * dataW + 6]) + 21./16. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 2]) + 21./8. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 5 * dataW + 1]);
        dst[bIdx + 60 * gap] = + 105./16. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 5 * dataW + 4]) + 1./2. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 7 * dataW + 1]) + 2./1. * ( + src[sIdx + 1 * dataW + 5] - src[sIdx + 7 * dataW + 5]) + 1./4. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 7 * dataW + 2]) + 21./2. * ( - src[sIdx + 3 * dataW + 5] + src[sIdx + 5 * dataW + 5]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 7 * dataW + 6]) + 5./4. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 7 * dataW + 4]) + 105./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 5 * dataW + 3]) + 5./2. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 7 * dataW + 3]) + 21./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 5 * dataW + 6]) + 21./16. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 2]) + 21./8. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 5 * dataW + 1]);
        dst[bIdx + 61 * gap] = + 1./2. * ( - src[sIdx + 1 * dataW + 5] + src[sIdx + 7 * dataW + 5]) + 2./1. * ( - src[sIdx + 1 * dataW + 1] + src[sIdx + 7 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 7 * dataW + 2]) + 5./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 7 * dataW + 4]) + 21./2. * ( + src[sIdx + 3 * dataW + 1] - src[sIdx + 5 * dataW + 1]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 7 * dataW + 6]) + 105./8. * ( - src[sIdx + 3 * dataW + 3] + src[sIdx + 5 * dataW + 3]) + 105./4. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 5 * dataW + 4]) + 21./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 2]) + 5./2. * ( + src[sIdx + 1 * dataW + 3] - src[sIdx + 7 * dataW + 3]) + 21./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 5 * dataW + 6]) + 21./8. * ( + src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 5]);
        dst[bIdx + 62 * gap] = + 1./2. * ( + src[sIdx + 1 * dataW + 5] - src[sIdx + 7 * dataW + 5]) + 2./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 7 * dataW + 1]) + 4./1. * ( - src[sIdx + 1 * dataW + 2] + src[sIdx + 7 * dataW + 2]) + 5./1. * ( + src[sIdx + 1 * dataW + 4] - src[sIdx + 7 * dataW + 4]) + 21./2. * ( - src[sIdx + 3 * dataW + 1] + src[sIdx + 5 * dataW + 1]) + 1./1. * ( - src[sIdx + 1 * dataW + 6] + src[sIdx + 7 * dataW + 6]) + 105./8. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 5 * dataW + 3]) + 105./4. * ( - src[sIdx + 3 * dataW + 4] + src[sIdx + 5 * dataW + 4]) + 21./1. * ( + src[sIdx + 3 * dataW + 2] - src[sIdx + 5 * dataW + 2]) + 5./2. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 7 * dataW + 3]) + 21./4. * ( + src[sIdx + 3 * dataW + 6] - src[sIdx + 5 * dataW + 6]) + 21./8. * ( - src[sIdx + 3 * dataW + 5] + src[sIdx + 5 * dataW + 5]);
        dst[bIdx + 63 * gap] = + 21./4. * ( - src[sIdx + 1 * dataW + 3] + src[sIdx + 1 * dataW + 5] - src[sIdx + 3 * dataW + 1] + src[sIdx + 3 * dataW + 7] + src[sIdx + 5 * dataW + 1] - src[sIdx + 5 * dataW + 7] + src[sIdx + 7 * dataW + 3] - src[sIdx + 7 * dataW + 5]) + 1./1. * ( + src[sIdx + 1 * dataW + 1] - src[sIdx + 1 * dataW + 7] - src[sIdx + 7 * dataW + 1] + src[sIdx + 7 * dataW + 7]) + 441./16. * ( + src[sIdx + 3 * dataW + 3] - src[sIdx + 3 * dataW + 5] - src[sIdx + 5 * dataW + 3] + src[sIdx + 5 * dataW + 5]);
	}
}


template <typename Dtype> 
__global__ void winoSrcAddOpt_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int tileH, int tileW, int inputs, int batchs, int tNums)
{

	CUDA_KERNEL_LOOP(idx, tNums) {
		int gap = tileH * tileW * inputs * batchs;

		int batchIdx = idx / (tileH * tileW * inputs);
		int inputIdx = (idx / (tileH * tileW)) % inputs ;

		int yIdx = (idx % (tileH * tileW)) / tileW ;
		int xIdx = idx % tileW;

		int bIdx =  idx % gap;
		int sIdx = batchIdx * inputs * dataW * dataH + inputIdx * dataW * dataH + yIdx * dataW * 2 + xIdx * 2;

		float C[16]; 

		//// -- project ---- ///

	}
}

template <typename Dtype> 
__global__ void wino4x4SrcAddOpt_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int tileH, int tileW, int inputs, int batchs, int tNums)
{

	CUDA_KERNEL_LOOP(idx, tNums) {
		int gap = tileH * tileW * inputs * batchs;

		int batchIdx = idx / (tileH * tileW * inputs);
		int inputIdx = (idx / (tileH * tileW)) % inputs ;

		int yIdx = (idx % (tileH * tileW)) / tileW ;
		int xIdx = idx % tileW;

		int bIdx =  idx % gap;
		int sIdx = batchIdx * inputs * dataW * dataH + inputIdx * dataW * dataH + yIdx * dataW * 2 + xIdx * 2;


		//// -- project ---- ///

	}
}

template <typename Dtype> 
__global__ void wino6x6SrcAddOpt_gpu_kernel(const Dtype *src, Dtype *dst, int dataH, int dataW, int tileH, int tileW, int inputs, int batchs, int tNums)
{

	CUDA_KERNEL_LOOP(idx, tNums) {
		int gap = tileH * tileW * inputs * batchs;

		int batchIdx = idx / (tileH * tileW * inputs);
		int inputIdx = (idx / (tileH * tileW)) % inputs ;

		int yIdx = (idx % (tileH * tileW)) / tileW ;
		int xIdx = idx % tileW;

		int bIdx =  idx % gap;
		int sIdx = batchIdx * inputs * dataW * dataH + inputIdx * dataW * dataH + yIdx * dataW * 2 + xIdx * 2;


		//// -- project ---- ///

	}
}



template <typename Dtype> 
__global__ void winoMulti_gpu_kernel(const Dtype *u_matrix, const Dtype *v_matrix, Dtype *m_matrix, const int M, const int N, const int K)
{
	const Dtype *A = u_matrix + blockIdx.z * M * K;
	const Dtype *B = v_matrix + blockIdx.z * K * N;
	Dtype *C = m_matrix + blockIdx.z * M * N;

	int br = blockIdx.y, bc = blockIdx.x;
	int tr = threadIdx.y, tc = threadIdx.x;
	int Cr = br * BLOCK_SIZE + tr;
	int Cc = bc * BLOCK_SIZE + tc;
	Dtype s = 0;
	int BN = (K + BLOCK_SIZE - 1) / BLOCK_SIZE;
	for (int i = 0; i < BN; ++i) {
		__shared__ float a[BLOCK_SIZE][BLOCK_SIZE];
		__shared__ float b[BLOCK_SIZE][BLOCK_SIZE];
		int Ar = Cr, Ac = i * BLOCK_SIZE + tc;
		if (Ar < M && Ac < K)
			a[tr][tc] = A[Ar * K + Ac];
		else
			a[tr][tc] = 0;
		int Br = i * BLOCK_SIZE + tr, Bc = Cc;
		if (Br < K && Bc < N)
			b[tr][tc] = B[Br * N + Bc];
		else 
			b[tr][tc] = 0;
		__syncthreads();
		for (int j = 0; j < BLOCK_SIZE; ++j)
			s += a[tr][j] * b[j][tc];
		__syncthreads();
	}
	if (Cr < M && Cc < N)
		C[Cr * N + Cc] = s;
}


template <typename Dtype> 
__global__ void winoDst_gpu_kernel(const Dtype *src, Dtype * dst, const int tileH, const int tileW, const int outH, const int outW, const int outputs, const int batchs, const int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int highIdx = idx / (tileW * tileH);
		int yIdx = (idx % (tileW * tileH)) / tileW;
		int xIdx = idx % tileW;
		int rIdx = highIdx * outW * outH + yIdx * outW * 2 + xIdx * 2;
		int mIdx = (idx % tNums); 
		int gap = batchs * outputs * tileH * tileW;

        dst[rIdx + 0 * outW + 0] = + 1./1. * ( + src[mIdx + 0 * gap] + src[mIdx + 1 * gap] + src[mIdx + 2 * gap] + src[mIdx + 4 * gap] + src[mIdx + 5 * gap] + src[mIdx + 6 * gap] + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap]);
        dst[rIdx + 0 * outW + 1] = + 1./1. * ( + src[mIdx + 1 * gap] - src[mIdx + 2 * gap] + src[mIdx + 3 * gap] + src[mIdx + 5 * gap] - src[mIdx + 6 * gap] + src[mIdx + 7 * gap] + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 11 * gap]);
        dst[rIdx + 1 * outW + 0] = + 1./1. * ( + src[mIdx + 4 * gap] + src[mIdx + 5 * gap] + src[mIdx + 6 * gap] - src[mIdx + 8 * gap] - src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap]);
        dst[rIdx + 1 * outW + 1] = + 1./1. * ( + src[mIdx + 5 * gap] - src[mIdx + 6 * gap] + src[mIdx + 7 * gap] - src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 11 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 15 * gap]);
	}
}

template <typename Dtype> 
__global__ void wino4x4Dst_gpu_kernel(const Dtype *src, Dtype * dst, const int tileH, const int tileW, const int outH, const int outW, const int outputs, const int batchs, const int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int highIdx = idx / (tileW * tileH);
		int yIdx = (idx % (tileW * tileH)) / tileW;
		int xIdx = idx % tileW;
		int rIdx = highIdx * outW * outH + yIdx * outW * 4 + xIdx * 4;
		int mIdx = (idx % tNums); 
		int gap = batchs * outputs * tileH * tileW;

        dst[rIdx + 0 * outW + 0] = + 1./1. * ( + src[mIdx + 0 * gap] + src[mIdx + 1 * gap] + src[mIdx + 2 * gap] + src[mIdx + 3 * gap] + src[mIdx + 4 * gap] + src[mIdx + 6 * gap] + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 15 * gap] + src[mIdx + 16 * gap] + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
        dst[rIdx + 0 * outW + 1] = + 1./1. * ( + src[mIdx + 1 * gap] - src[mIdx + 2 * gap] + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap]) + 2./1. * ( + src[mIdx + 3 * gap] - src[mIdx + 4 * gap] + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 16 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap]);
        dst[rIdx + 0 * outW + 2] = + 1./1. * ( + src[mIdx + 1 * gap] + src[mIdx + 2 * gap] + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap]) + 4./1. * ( + src[mIdx + 3 * gap] + src[mIdx + 4 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 15 * gap] + src[mIdx + 16 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
        dst[rIdx + 0 * outW + 3] = + 8./1. * ( + src[mIdx + 3 * gap] - src[mIdx + 4 * gap] + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 16 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap]) + 1./1. * ( + src[mIdx + 1 * gap] - src[mIdx + 2 * gap] + src[mIdx + 5 * gap] + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] + src[mIdx + 11 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 17 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 23 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 29 * gap]);
        dst[rIdx + 1 * outW + 0] = + 1./1. * ( + src[mIdx + 6 * gap] + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 12 * gap] - src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 15 * gap] - src[mIdx + 16 * gap]) + 2./1. * ( + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] - src[mIdx + 24 * gap] - src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 27 * gap] - src[mIdx + 28 * gap]);
        dst[rIdx + 1 * outW + 1] = + 1./1. * ( + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] - src[mIdx + 13 * gap] + src[mIdx + 14 * gap]) + 2./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 15 * gap] + src[mIdx + 16 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] - src[mIdx + 25 * gap] + src[mIdx + 26 * gap]) + 4./1. * ( + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] - src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
        dst[rIdx + 1 * outW + 2] = + 8./1. * ( + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] - src[mIdx + 27 * gap] - src[mIdx + 28 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] - src[mIdx + 13 * gap] - src[mIdx + 14 * gap]) + 2./1. * ( + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] - src[mIdx + 25 * gap] - src[mIdx + 26 * gap]) + 4./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 15 * gap] - src[mIdx + 16 * gap]);
        dst[rIdx + 1 * outW + 3] = + 8./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 15 * gap] + src[mIdx + 16 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] + src[mIdx + 11 * gap] - src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 17 * gap]) + 2./1. * ( + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 23 * gap] - src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 29 * gap]) + 16./1. * ( + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] - src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
        dst[rIdx + 2 * outW + 0] = + 1./1. * ( + src[mIdx + 6 * gap] + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 15 * gap] + src[mIdx + 16 * gap]) + 4./1. * ( + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
        dst[rIdx + 2 * outW + 1] = + 8./1. * ( + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap]) + 2./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 16 * gap]) + 4./1. * ( + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap]);
        dst[rIdx + 2 * outW + 2] = + 16./1. * ( + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap]) + 4./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 15 * gap] + src[mIdx + 16 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap]);
        dst[rIdx + 2 * outW + 3] = + 8./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 16 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] + src[mIdx + 11 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 17 * gap]) + 4./1. * ( + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 23 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 29 * gap]) + 32./1. * ( + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap]);
        dst[rIdx + 3 * outW + 0] = + 8./1. * ( + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] - src[mIdx + 24 * gap] - src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 27 * gap] - src[mIdx + 28 * gap]) + 1./1. * ( + src[mIdx + 6 * gap] + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 12 * gap] - src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 15 * gap] - src[mIdx + 16 * gap] + src[mIdx + 30 * gap] + src[mIdx + 31 * gap] + src[mIdx + 32 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap]);
        dst[rIdx + 3 * outW + 1] = + 8./1. * ( + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] - src[mIdx + 25 * gap] + src[mIdx + 26 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] - src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 31 * gap] - src[mIdx + 32 * gap]) + 2./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 15 * gap] + src[mIdx + 16 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 16./1. * ( + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] - src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
        dst[rIdx + 3 * outW + 2] = + 8./1. * ( + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] - src[mIdx + 25 * gap] - src[mIdx + 26 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] + src[mIdx + 8 * gap] - src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 31 * gap] + src[mIdx + 32 * gap]) + 4./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 15 * gap] - src[mIdx + 16 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 32./1. * ( + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] - src[mIdx + 27 * gap] - src[mIdx + 28 * gap]);
        dst[rIdx + 3 * outW + 3] = + 8./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 15 * gap] + src[mIdx + 16 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 23 * gap] - src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 29 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./1. * ( + src[mIdx + 7 * gap] - src[mIdx + 8 * gap] + src[mIdx + 11 * gap] - src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 17 * gap] + src[mIdx + 31 * gap] - src[mIdx + 32 * gap] + src[mIdx + 35 * gap]) + 64./1. * ( + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] - src[mIdx + 27 * gap] + src[mIdx + 28 * gap]);
	}
}

template <typename Dtype> 
__global__ void wino6x6Dst_gpu_kernel(const Dtype *src, Dtype * dst, const int tileH, const int tileW, const int outH, const int outW, const int outputs, const int batchs, const int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int highIdx = idx / (tileW * tileH);
		int yIdx = (idx % (tileW * tileH)) / tileW;
		int xIdx = idx % tileW;
		int rIdx = highIdx * outW * outH + yIdx * outW * 6 + xIdx * 6;
		int mIdx = (idx % tNums); 
		int gap = batchs * outputs * tileH * tileW;

        dst[rIdx + 0 * outW + 0] = + 1./1. * ( + src[mIdx + 0 * gap] + src[mIdx + 1 * gap] + src[mIdx + 2 * gap] + src[mIdx + 3 * gap] + src[mIdx + 4 * gap] + src[mIdx + 5 * gap] + src[mIdx + 6 * gap] + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 16 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 32 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 40 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 48 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]);
        dst[rIdx + 0 * outW + 1] = + 1./1. * ( + src[mIdx + 1 * gap] - src[mIdx + 2 * gap] + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap] + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 2./1. * ( + src[mIdx + 3 * gap] - src[mIdx + 4 * gap] + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./2. * ( + src[mIdx + 5 * gap] - src[mIdx + 6 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap] + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]);
        dst[rIdx + 0 * outW + 2] = + 1./1. * ( + src[mIdx + 1 * gap] + src[mIdx + 2 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 1./4. * ( + src[mIdx + 5 * gap] + src[mIdx + 6 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 4./1. * ( + src[mIdx + 3 * gap] + src[mIdx + 4 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap]);
        dst[rIdx + 0 * outW + 3] = + 8./1. * ( + src[mIdx + 3 * gap] - src[mIdx + 4 * gap] + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./1. * ( + src[mIdx + 1 * gap] - src[mIdx + 2 * gap] + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap] + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 1./8. * ( + src[mIdx + 5 * gap] - src[mIdx + 6 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap] + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]);
        dst[rIdx + 0 * outW + 4] = + 16./1. * ( + src[mIdx + 3 * gap] + src[mIdx + 4 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./1. * ( + src[mIdx + 1 * gap] + src[mIdx + 2 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 1./16. * ( + src[mIdx + 5 * gap] + src[mIdx + 6 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]);
        dst[rIdx + 0 * outW + 5] = + 32./1. * ( + src[mIdx + 3 * gap] - src[mIdx + 4 * gap] + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./1. * ( + src[mIdx + 1 * gap] - src[mIdx + 2 * gap] + src[mIdx + 7 * gap] + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 23 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 31 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap] + src[mIdx + 39 * gap] + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 47 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap] + src[mIdx + 55 * gap]) + 1./32. * ( + src[mIdx + 5 * gap] - src[mIdx + 6 * gap] + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap] + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]);
        dst[rIdx + 1 * outW + 0] = + 1./1. * ( + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 16 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 2./1. * ( + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 32 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 1./2. * ( + src[mIdx + 40 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 48 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]);
        dst[rIdx + 1 * outW + 1] = + 1./4. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 2./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 4./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./2. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap]);
        dst[rIdx + 1 * outW + 2] = + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./4. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 1./2. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 8./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 4./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap]);
        dst[rIdx + 1 * outW + 3] = + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./4. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap]) + 1./2. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 8./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap]) + 16./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./16. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 4./1. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./8. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap]);
        dst[rIdx + 1 * outW + 4] = + 32./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./2. * ( + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 8./1. * ( + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 16./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 1./32. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 1./8. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]);
        dst[rIdx + 1 * outW + 5] = + 32./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] - src[mIdx + 23 * gap]) + 2./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 31 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap] - src[mIdx + 39 * gap]) + 1./2. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 47 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap] - src[mIdx + 55 * gap]) + 1./32. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap]) + 64./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 16./1. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./64. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap]);
        dst[rIdx + 2 * outW + 0] = + 1./1. * ( + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 16 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap]) + 1./4. * ( + src[mIdx + 40 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 48 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 4./1. * ( + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 32 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap]);
        dst[rIdx + 2 * outW + 1] = + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 4./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./2. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 8./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./4. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap]);
        dst[rIdx + 2 * outW + 2] = + 16./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./4. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 4./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./16. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]);
        dst[rIdx + 2 * outW + 3] = + 32./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 4./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./2. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 8./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 1./8. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 1./32. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./4. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap]);
        dst[rIdx + 2 * outW + 4] = + 64./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap]) + 1./4. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 1./64. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 16./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap]) + 1./16. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap]) + 4./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap]);
        dst[rIdx + 2 * outW + 5] = + 32./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 23 * gap]) + 4./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 31 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap] + src[mIdx + 39 * gap]) + 1./32. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 128./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 8./1. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./128. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./4. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 47 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap] + src[mIdx + 55 * gap]);
        dst[rIdx + 3 * outW + 0] = + 8./1. * ( + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 32 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 1./1. * ( + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 16 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 1./8. * ( + src[mIdx + 40 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 48 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]);
        dst[rIdx + 3 * outW + 1] = + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap]) + 4./1. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap]) + 1./2. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap]) + 8./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 16./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./16. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 1./4. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./8. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap]);
        dst[rIdx + 3 * outW + 2] = + 32./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 1./4. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 1./2. * ( + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 8./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./8. * ( + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 1./32. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 4./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap]);
        dst[rIdx + 3 * outW + 3] = + 8./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./64. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 64./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap]);
        dst[rIdx + 3 * outW + 4] = + 128./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./2. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 8./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 16./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 1./128. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 1./8. * ( + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap]);
        dst[rIdx + 3 * outW + 5] = + 32./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] - src[mIdx + 23 * gap]) + 1./4. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap]) + 1./32. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap]) + 256./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 47 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap] - src[mIdx + 55 * gap]) + 8./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 31 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap] - src[mIdx + 39 * gap]) + 4./1. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./256. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]);
        dst[rIdx + 4 * outW + 0] = + 16./1. * ( + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 32 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap]) + 1./1. * ( + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 16 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap]) + 1./16. * ( + src[mIdx + 40 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 48 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]);
        dst[rIdx + 4 * outW + 1] = + 32./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 1./2. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 8./1. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 16./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./32. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 1./8. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]);
        dst[rIdx + 4 * outW + 2] = + 64./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap]) + 1./4. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./64. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 16./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./16. * ( + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 4./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap]);
        dst[rIdx + 4 * outW + 3] = + 128./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap]) + 2./1. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 1./2. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 8./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 16./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./128. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 1./8. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap]);
        dst[rIdx + 4 * outW + 4] = + 16./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] + src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./256. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] + src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] + src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 256./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 35 * gap] + src[mIdx + 36 * gap]);
        dst[rIdx + 4 * outW + 5] = + 32./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] + src[mIdx + 19 * gap] - src[mIdx + 20 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] + src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 23 * gap]) + 2./1. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] + src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./2. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] + src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 1./32. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] + src[mIdx + 21 * gap] - src[mIdx + 22 * gap]) + 16./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 31 * gap] + src[mIdx + 33 * gap] - src[mIdx + 34 * gap] + src[mIdx + 39 * gap]) + 1./512. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] + src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 512./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] + src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./16. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 47 * gap] + src[mIdx + 49 * gap] - src[mIdx + 50 * gap] + src[mIdx + 55 * gap]);
        dst[rIdx + 5 * outW + 0] = + 32./1. * ( + src[mIdx + 24 * gap] + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 32 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 1./1. * ( + src[mIdx + 8 * gap] + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 16 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 56 * gap] + src[mIdx + 57 * gap] + src[mIdx + 58 * gap] + src[mIdx + 59 * gap] + src[mIdx + 60 * gap] + src[mIdx + 61 * gap] + src[mIdx + 62 * gap]) + 1./32. * ( + src[mIdx + 40 * gap] + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 48 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]);
        dst[rIdx + 5 * outW + 1] = + 32./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 57 * gap] - src[mIdx + 58 * gap]) + 2./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 59 * gap] - src[mIdx + 60 * gap]) + 1./64. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 1./2. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 61 * gap] - src[mIdx + 62 * gap]) + 64./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 16./1. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap]) + 1./32. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 1./16. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]);
        dst[rIdx + 5 * outW + 2] = + 32./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 57 * gap] + src[mIdx + 58 * gap]) + 1./4. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 61 * gap] + src[mIdx + 62 * gap]) + 8./1. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 128./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 1./32. * ( + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 1./128. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 4./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 59 * gap] + src[mIdx + 60 * gap]);
        dst[rIdx + 5 * outW + 3] = + 32./1. * ( + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] + src[mIdx + 57 * gap] - src[mIdx + 58 * gap]) + 4./1. * ( + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap]) + 8./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 59 * gap] - src[mIdx + 60 * gap]) + 256./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]) + 1./8. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 61 * gap] - src[mIdx + 62 * gap]) + 1./32. * ( + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap]) + 1./4. * ( + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap]) + 1./256. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]);
        dst[rIdx + 5 * outW + 4] = + 512./1. * ( + src[mIdx + 27 * gap] + src[mIdx + 28 * gap] - src[mIdx + 35 * gap] - src[mIdx + 36 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] + src[mIdx + 10 * gap] - src[mIdx + 17 * gap] - src[mIdx + 18 * gap] + src[mIdx + 57 * gap] + src[mIdx + 58 * gap]) + 2./1. * ( + src[mIdx + 29 * gap] + src[mIdx + 30 * gap] - src[mIdx + 37 * gap] - src[mIdx + 38 * gap]) + 32./1. * ( + src[mIdx + 25 * gap] + src[mIdx + 26 * gap] - src[mIdx + 33 * gap] - src[mIdx + 34 * gap]) + 1./32. * ( + src[mIdx + 41 * gap] + src[mIdx + 42 * gap] - src[mIdx + 49 * gap] - src[mIdx + 50 * gap]) + 1./2. * ( + src[mIdx + 43 * gap] + src[mIdx + 44 * gap] - src[mIdx + 51 * gap] - src[mIdx + 52 * gap]) + 16./1. * ( + src[mIdx + 11 * gap] + src[mIdx + 12 * gap] - src[mIdx + 19 * gap] - src[mIdx + 20 * gap] + src[mIdx + 59 * gap] + src[mIdx + 60 * gap]) + 1./512. * ( + src[mIdx + 45 * gap] + src[mIdx + 46 * gap] - src[mIdx + 53 * gap] - src[mIdx + 54 * gap]) + 1./16. * ( + src[mIdx + 13 * gap] + src[mIdx + 14 * gap] - src[mIdx + 21 * gap] - src[mIdx + 22 * gap] + src[mIdx + 61 * gap] + src[mIdx + 62 * gap]);
        dst[rIdx + 5 * outW + 5] = + 32./1. * ( + src[mIdx + 11 * gap] - src[mIdx + 12 * gap] - src[mIdx + 19 * gap] + src[mIdx + 20 * gap] + src[mIdx + 25 * gap] - src[mIdx + 26 * gap] + src[mIdx + 31 * gap] - src[mIdx + 33 * gap] + src[mIdx + 34 * gap] - src[mIdx + 39 * gap] + src[mIdx + 59 * gap] - src[mIdx + 60 * gap]) + 1./1. * ( + src[mIdx + 9 * gap] - src[mIdx + 10 * gap] + src[mIdx + 15 * gap] - src[mIdx + 17 * gap] + src[mIdx + 18 * gap] - src[mIdx + 23 * gap] + src[mIdx + 29 * gap] - src[mIdx + 30 * gap] - src[mIdx + 37 * gap] + src[mIdx + 38 * gap] + src[mIdx + 43 * gap] - src[mIdx + 44 * gap] - src[mIdx + 51 * gap] + src[mIdx + 52 * gap] + src[mIdx + 57 * gap] - src[mIdx + 58 * gap] + src[mIdx + 63 * gap]) + 1./32. * ( + src[mIdx + 13 * gap] - src[mIdx + 14 * gap] - src[mIdx + 21 * gap] + src[mIdx + 22 * gap] + src[mIdx + 41 * gap] - src[mIdx + 42 * gap] + src[mIdx + 47 * gap] - src[mIdx + 49 * gap] + src[mIdx + 50 * gap] - src[mIdx + 55 * gap] + src[mIdx + 61 * gap] - src[mIdx + 62 * gap]) + 1./1024. * ( + src[mIdx + 45 * gap] - src[mIdx + 46 * gap] - src[mIdx + 53 * gap] + src[mIdx + 54 * gap]) + 1024./1. * ( + src[mIdx + 27 * gap] - src[mIdx + 28 * gap] - src[mIdx + 35 * gap] + src[mIdx + 36 * gap]);
	}
}



template <typename Dtype> 
__global__ void winoDstAddOpt_gpu_kernel(const Dtype *src, Dtype * dst, const int tileH, const int tileW, const int outH, const int outW, const int outputs, const int batchs, const int tNums)
{


	CUDA_KERNEL_LOOP(idx, tNums) {
		
		int highIdx = idx / (tileW * tileH);

		int yIdx = (idx % (tileW * tileH)) / tileW;
		int xIdx = idx % tileW;

		int rIdx = highIdx * outW * outH + yIdx * outW * 2 + xIdx * 2;
		int mIdx = (idx % tNums); 
		int gap = batchs * outputs * tileH * tileW;

        float tmp; 
		float A[16]; 

		//// -- project ---- ///

	}


}


template <typename Dtype> 
__global__ void wino4x4DstAddOpt_gpu_kernel(const Dtype *src, Dtype * dst, const int tileH, const int tileW, const int outH, const int outW, const int outputs, const int batchs, const int tNums)
{


	CUDA_KERNEL_LOOP(idx, tNums) {
		
		int highIdx = idx / (tileW * tileH);

		int yIdx = (idx % (tileW * tileH)) / tileW;
		int xIdx = idx % tileW;

		int rIdx = highIdx * outW * outH + yIdx * outW * 2 + xIdx * 2;
		int mIdx = (idx % tNums); 
		int gap = batchs * outputs * tileH * tileW;


		//// -- project ---- ///

	}
}

template <typename Dtype> 
__global__ void wino6x6DstAddOpt_gpu_kernel(const Dtype *src, Dtype * dst, const int tileH, const int tileW, const int outH, const int outW, const int outputs, const int batchs, const int tNums)
{


	CUDA_KERNEL_LOOP(idx, tNums) {
		
		int highIdx = idx / (tileW * tileH);

		int yIdx = (idx % (tileW * tileH)) / tileW;
		int xIdx = idx % tileW;

		int rIdx = highIdx * outW * outH + yIdx * outW * 2 + xIdx * 2;
		int mIdx = (idx % tNums); 
		int gap = batchs * outputs * tileH * tileW;


		//// -- project ---- ///

	}
}

template <typename Dtype> 
__global__ void unpadDst_gpu_kernel(const Dtype *src, Dtype *dst,
		const int height_out_p, const int width_out_p,
		const int height_out, const int width_out, int tNums)
{
	CUDA_KERNEL_LOOP(idx, tNums) {
		int highIdx = idx / (height_out * width_out);
		int yIdx = idx % (height_out * width_out) / width_out;
		int xIdx = idx % width_out;
		dst[idx] = src[highIdx * height_out_p * width_out_p + yIdx * width_out_p + xIdx]; 
	}
}

template <typename Dtype>
void winoWeight_gpu(const int num_inputs, const int num_outputs, 
					const Dtype *weight, Dtype *wino_weight, const int wino_tile_size )
{
	int num_kernels = num_inputs * num_outputs;

	if((wino_tile_size == 2) || (wino_tile_size == 12))
		winoWeight_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
			                         CAFFE_CUDA_NUM_THREADS>>>(weight, wino_weight, num_inputs, num_outputs, num_kernels); 
	else if((wino_tile_size == 4) || (wino_tile_size == 14))
		wino4x4Weight_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
			                         CAFFE_CUDA_NUM_THREADS>>>(weight, wino_weight, num_inputs, num_outputs, num_kernels); 
	else if((wino_tile_size == 6) || (wino_tile_size == 16))
		wino6x6Weight_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
			                         CAFFE_CUDA_NUM_THREADS>>>(weight, wino_weight, num_inputs, num_outputs, num_kernels); 

}

template void winoWeight_gpu<float>(const int num_inputs, const int num_outputs, 
									const float *weight, float *wino_weight, const int wino_tile_size); 
template void winoWeight_gpu<double>(const int num_inputs, const int num_outputs, 
									const double *weight, double *wino_weight, const int wino_tile_size); 




template <typename Dtype>
void padSrc_gpu(const int batchs, const int num_inputs, const int height, const int width, 
				const int height_pad, const int width_pad,
				int height_p, int width_p,
				const Dtype *input, Dtype *input_pad)
{
	int num_kernels = batchs * num_inputs * height_p * width_p;

	padSrc_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
                             CAFFE_CUDA_NUM_THREADS>>>(input, input_pad, height, width, height_p, width_p, num_inputs, batchs, height_pad, 0, num_kernels); 
}

template void padSrc_gpu<float>(const int batchs, const int num_inputs, const int height, const int width, 
				const int height_pad, const int width_pad,
				int height_p, int width_p,
				const float *input, float *input_pad); 
template void padSrc_gpu<double>(const int batchs, const int num_inputs, const int height, const int width, 
				const int height_pad, const int width_pad,
				int height_p, int width_p,
				const double *input, double *input_pad); 


template <typename Dtype>
void winoSrc_gpu(const int batchs, const int num_inputs, const int tileH, const int tileW, 
				const int height, const int width, // include padding 
				const Dtype *m_matrix, Dtype *v_matrix, const int wino_tile_size)
{
	int num_kernels = batchs * num_inputs * tileH * tileW;

	if(wino_tile_size == 2)
	{
		winoSrc_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
				                         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, v_matrix, height, width,  tileH, tileW, num_inputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 12)
	{
		winoSrcAddOpt_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
			                         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, v_matrix, height, width,  tileH, tileW, num_inputs, batchs, num_kernels); 
	}
	else if (wino_tile_size == 4)
	{
		wino4x4Src_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
				                         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, v_matrix, height, width,  tileH, tileW, num_inputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 14)
	{
		winoSrcAddOpt_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
			                         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, v_matrix, height, width,  tileH, tileW, num_inputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 6)
	{
		wino6x6Src_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
				                         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, v_matrix, height, width,  tileH, tileW, num_inputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 16)
	{
		wino6x6SrcAddOpt_gpu_kernel<Dtype><<< CAFFE_GET_BLOCKS(num_kernels),
			                         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, v_matrix, height, width,  tileH, tileW, num_inputs, batchs, num_kernels); 
	}
}

template void winoSrc_gpu<float>(const int batchs, const int num_inputs, const int tileH, const int tileW, 
						const int height, const int width, // include padding 
						const float *m_matrix, float *v_matrix, const int wino_tile_size); 
template void winoSrc_gpu<double>(const int batchs, const int num_inputs, const int tileH, const int tileW, 
						const int height, const int width, // include padding 
						const double *m_matrix, double *v_matrix, const int wino_tile_size); 



template <typename Dtype>
void winoMulti_gpu(const int batchs, const int num_inputs, const int num_outputs, const int tileH, const int tileW, 
					const Dtype *u_matrix, Dtype *v_matrix, Dtype *m_matrix, const int wino_tile_size)
{
	int M = num_outputs, N = tileH * tileW * batchs, K = num_inputs;
	int MM = (M + BLOCK_SIZE - 1) / BLOCK_SIZE;
	int NN = (N + BLOCK_SIZE - 1) / BLOCK_SIZE;
	int batched = (wino_tile_size + 2) * (wino_tile_size + 2); 
	dim3 numBlocks(NN, MM, batched);
	dim3 threadsPerBlock(BLOCK_SIZE, BLOCK_SIZE);
	winoMulti_gpu_kernel<Dtype><<<numBlocks, threadsPerBlock>>>(u_matrix, v_matrix, m_matrix, M, N, K);
}

template void winoMulti_gpu<float>(const int batchs, const int num_inputs, const int num_outputs, const int tileH, const int tileW, 
									const float *u_matrix, float *v_matrix, float *m_matrix, const int wino_tile_size); 
template void winoMulti_gpu<double>(const int batchs, const int num_inputs, const int num_outputs, const int tileH, const int tileW, 
									const double *u_matrix, double *v_matrix, double *m_matrix, const int wino_tile_size); 




template <typename Dtype>
void winoDst_gpu(const int batchs, const int num_outputs, const int tileH, const int tileW, const int height, const int width,
				 Dtype *m_matrix, Dtype *output, const int wino_tile_size)
{
	
	int num_kernels = batchs * num_outputs * tileH * tileW;

	if(wino_tile_size == 2)
	{
		winoDst_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
					                 CAFFE_CUDA_NUM_THREADS>>>(m_matrix, output, tileH, tileW, height, width, num_outputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 12)
	{
		winoDstAddOpt_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
								         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, output, tileH, tileW, height, width, num_outputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 4)
	{
		wino4x4Dst_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
					                 CAFFE_CUDA_NUM_THREADS>>>(m_matrix, output, tileH, tileW, height, width, num_outputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 14)
	{
		wino4x4DstAddOpt_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
								         CAFFE_CUDA_NUM_THREADS>>>(m_matrix, output, tileH, tileW, height, width, num_outputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 6)
	{
        int t = 128;
        int b = (num_kernels + t - 1) / t;
		wino6x6Dst_gpu_kernel<Dtype><<<b, t>>>(m_matrix, output, tileH, tileW, height, width, num_outputs, batchs, num_kernels); 
	}
	else if(wino_tile_size == 16)
	{
		wino6x6DstAddOpt_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
					                 CAFFE_CUDA_NUM_THREADS>>>(m_matrix, output, tileH, tileW, height, width, num_outputs, batchs, num_kernels); 
	}
}

template void winoDst_gpu(const int batchs, const int num_outputs, const int tileH, const int tileW, const int height, const int width,
						 float *m_matrix, float *output, const int wino_tile_size); 

template void winoDst_gpu(const int batchs, const int num_outputs, const int tileH, const int tileW, const int height, const int width,
						 double *m_matrix, double *output, const int wino_tile_size); 

template <typename Dtype>
void unpadDst_gpu(const int batchs, const int num_outputs,
		const int height_out_p, const int width_out_p,
		const int height_out, const int width_out,
		const Dtype *o_matrix, Dtype *output)
{
	int num_kernels = batchs * num_outputs * height_out * width_out;
	unpadDst_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels), CAFFE_CUDA_NUM_THREADS>>>(o_matrix, output, height_out_p, width_out_p, height_out, width_out, num_kernels); 
}

template void unpadDst_gpu(const int batchs, const int num_outputs,
		const int height_out_p, const int width_out_p,
		const int height_out, const int width_out,
		const float *o_matrix, float *output);

template void unpadDst_gpu(const int batchs, const int num_outputs,
		const int height_out_p, const int width_out_p,
		const int height_out, const int width_out,
		const double *o_matrix, double *output);

} // namespaece caffe 
